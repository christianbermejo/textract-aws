AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Description:    Please specify the target environment.
    Type:           String
    Default:        "staging"
    AllowedValues:
      - prod
      - staging
      - dev
      - qa
  AppName:
    Description: Name of the application deploying for AWS Project
    Type: String
    Default: AWSTK
  DOMAINNAME:
    Description: Name for the Amazon ES domain that this template will create. Domain names must start with a lowercase letter and must be between 3 and 28 characters. Valid characters are a-z (lowercase only), 0-9.
    Type: String
    Default: resumecrawlocrapp
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.193.0.0/16
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.193.10.0/24
  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.193.20.0/24
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.193.30.0/24
  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.193.40.0/24
  # InstanceKeyName:
  #   Type: AWS::EC2::KeyPair::KeyName
  #   Description: The name of the private key file to use for SSH/RDP access.  You shouldn't need to do any SSH access, but just in case.
  #   Default: cf-iam
  # Email address for Cognito Admin user
  CognitoAdminEmail:
    Type: String
    Default: cybermejo@gmail.com
    AllowedPattern: '^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'
    Description: E-mail address of the Cognito admin name
  OriginProtocolPolicy:
    Description:    CloudFront Origin Protocol Policy to apply to your origin.
    Type:           String
    Default:        "http-only"
    AllowedValues:
      - http-only
      - match-viewer
      - https-only
  OriginKeepaliveTimeout:
    Description:    You can create a custom keep-alive timeout. All timeout units are in seconds. The default keep-alive timeout is 5 seconds, but you can configure custom timeout lengths. The minimum timeout length is 1 second; the maximum is 60 seconds.
    Type:           String
    Default:        "60"

  OriginReadTimeout:
    Description:    You can create a custom origin read timeout. All timeout units are in seconds. The default origin read timeout is 30 seconds, but you can configure custom timeout lengths. The minimum timeout length is 4 seconds; the maximum is 60 seconds.
    Type:           String
    Default:        "30"
  # START OF ALB PARAMETERS
  ALBType:
    Description:    AWS Load Balancer Type.
    Type:           String
    Default:        "application"
    AllowedValues:
      - application
      - network

  OriginALBTGPort:
    Description:    Port number the application is running on, for Origin ALB Target Group and Health Check port.
    Type:           String
    Default:        "8080"

  ALBScheme:
    Description:    Origin ALB scheme.
    Type:           String
    Default:        "internet-facing"
    AllowedValues:
      - internet-facing
      - internal

  ALBTargetGroupHealthCheckIntervalSeconds:
    Description:    Origin ALB Target Group Health Check Interval in Seconds.
    Type:           String
    Default:        "30"

  ALBTargetGroupHealthCheckTimeoutSeconds:
    Description:    Origin ALB Target Group Health Check Timeout in Seconds.
    Type:           String
    Default:        "5"

  ALBTargetGroupHealthyThresholdCount:
    Description:    Origin ALB Target Group Healthy Threshold Count.
    Type:           String
    Default:        "5"

  ALBTargetGroupUnhealthyThresholdCount:
    Description:    Origin ALB Target Group Unhealthy Threshold Count.
    Type:           String
    Default:        "2"

  ALBAttributeIdleTimeOut:
    Description:    Origin ALB Target Group Unhealthy Threshold Count.
    Type:           String
    Default:        "60"

  ALBAttributeDeletionProtection:
    Description:    Origin ALB Target Group Unhealthy Threshold Count.
    Type:           String
    Default:        false
    AllowedValues:
      - true
      - false

  ALBAttributeRoutingHttp2:
    Description:    Origin ALB Target Group Unhealthy Threshold Count.
    Type:           String
    Default:        true
    AllowedValues:
      - true
      - false

  ALBTargetGroupAttributeDeregistration:
    Description:    Origin ALB Target Group Deregistration Timeout.
    Type:           String
    Default:        "300"

  HealthCheckProtocol:
    Description:    Origin ALB Target Group Health Check Protocol.
    Type:           String
    Default:        "HTTP"
    AllowedValues:
      - HTTPS
      - HTTP

  HealthCheckPath:
    Description:    Origin ALB Target Group Health Check Path.
    Type:           String
    Default:        "/"
  # END OF ALB PARAMETERS

# Enable blue/green deployments using this Globals section. For instructions, see the AWS CodeStar User Guide:
# https://docs.aws.amazon.com/codestar/latest/userguide/how-to-modify-serverless-project.html?icmpid=docs_acs_rm_tr
#
# Globals:
#   Function:
#     AutoPublishAlias: live
#     DeploymentPreference:
#       Enabled: true
#       Type: Canary10Percent5Minutes


Mappings:
  # Lambda source code mapping
  SourceCode:
    General:
      S3Bucket: "solutions"
      KeyPrefix: "centralized-logging/v2.2.0"
  #  This is just the Amazon Linux AMI:
  AmazonLinuxAMI:
    us-east-1: # Virginia
      AMI: ami-a4c7edb2
    us-east-2: # Ohio
      AMI: ami-8a7859ef
    us-west-1: # North California
      AMI: ami-327f5352
    us-west-2: # Oregon
      AMI: ami-6df1e514
    eu-west-1: # Ireland
      AMI: ami-d7b9a2b1
    eu-west-2: # London
      AMI: ami-ed100689
    eu-central-1: # Frankfurt
      AMI: ami-82be18ed
    sa-east-1: # Sao Paulo
      AMI: ami-87dab1eb
    ap-southeast-1: # Singapore
      AMI: ami-77af2014
    ap-southeast-2: # Sydney
      AMI: ami-10918173
    ap-northeast-1: # Tokyo
      AMI: ami-3bd3c45c
    ap-northeast-2: # Seoul
      AMI: ami-e21cc38c
    ca-central-1: # Canada
      AMI: ami-a7aa15c3
    ap-south-1: # Mumbai
      AMI: ami-47205e28

Resources:
  MyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
        LayerName: Boto3
        Description: My Lambda Layer with Deserialize Function, Objectpath Module & AWS Regions JSON
        ContentUri: lambda-layers/boto3-layer.zip
        CompatibleRuntimes:
            - python3.6
            - python3.7

  # VPC:
  #   Type: AWS::EC2::VPC
  #   Properties:
  #     CidrBlock: !Ref VpcCIDR
  #     EnableDnsSupport: true
  #     EnableDnsHostnames: true
  #     Tags:
  #         - Key: Name
  #           Value: !Ref AppName

  # InternetGateway:
  #     Type: AWS::EC2::InternetGateway
  #     Properties:
  #         Tags:
  #             - Key: Name
  #               Value: !Ref AppName

  # InternetGatewayAttachment:
  #     Type: AWS::EC2::VPCGatewayAttachment
  #     Properties:
  #         InternetGatewayId: !Ref InternetGateway
  #         VpcId: !Ref VPC

  # NAT:
  #   Type: AWS::EC2::NatGateway
  #   DependsOn: InternetGatewayAttachment
  #   Properties:
  #     AllocationId:
  #       Fn::GetAtt:
  #       - EIP
  #       - AllocationId
  #     SubnetId:
  #       Ref: PublicSubnet1

  # EIP:
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     Domain: vpc

  # PrivateRouteTable:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref 'VPC'

  # PrivateRouteToInternet:
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId: !Ref 'PrivateRouteTable'
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref 'NAT'

  # PrivateSubnetOneRouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref 'PrivateSubnet1'
  #     RouteTableId: !Ref 'PrivateRouteTable'

  # PrivateSubnetTwoRouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref 'PrivateSubnet2'
  #     RouteTableId: !Ref 'PrivateRouteTable'

  # PublicSubnet1:
  #   Type: AWS::EC2::Subnet
  #   DependsOn: VPC
  #   Properties:
  #       VpcId: !Ref VPC
  #       CidrBlock: !Ref PublicSubnet1CIDR
  #       MapPublicIpOnLaunch: true
  #       AvailabilityZone: !Select
  #           - '0'
  #           - !GetAZs
  #             Ref: AWS::Region
  #       Tags:
  #           - Key: Name
  #             Value: !Sub ${AppName} Public Subnet 1

  # PublicSubnet2:
  #     Type: AWS::EC2::Subnet
  #     Properties:
  #         VpcId: !Ref VPC
  #         CidrBlock: !Ref PublicSubnet2CIDR
  #         MapPublicIpOnLaunch: true
  #         AvailabilityZone: !Select
  #           - '1'
  #           - !GetAZs
  #             Ref: AWS::Region
  #         Tags:
  #             - Key: Name
  #               Value: !Sub ${AppName} Public Subnet 2

  # PrivateSubnet1:
  #     Type: AWS::EC2::Subnet
  #     Properties:
  #         VpcId: !Ref VPC
  #         CidrBlock: !Ref PrivateSubnet1CIDR
  #         MapPublicIpOnLaunch: false
  #         AvailabilityZone: !Select
  #           - '0'
  #           - !GetAZs
  #             Ref: AWS::Region
  #         Tags:
  #             - Key: Name
  #               Value: !Sub ${AppName} Private Subnet 1

  # PrivateSubnet2:
  #     Type: AWS::EC2::Subnet
  #     Properties:
  #         VpcId: !Ref VPC
  #         CidrBlock: !Ref PrivateSubnet2CIDR
  #         MapPublicIpOnLaunch: false
  #         AvailabilityZone: !Select
  #           - '1'
  #           - !GetAZs
  #             Ref: AWS::Region
  #         Tags:
  #             - Key: Name
  #               Value: !Sub ${AppName} Private Subnet 2

  # PublicRouteTable:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #       VpcId: !Ref VPC
  #       Tags:
  #           - Key: Name
  #             Value: !Sub ${AppName} Public Routes

  # DefaultPublicRoute:
  #     Type: AWS::EC2::Route
  #     DependsOn: InternetGatewayAttachment
  #     Properties:
  #         RouteTableId: !Ref PublicRouteTable
  #         DestinationCidrBlock: 0.0.0.0/0
  #         GatewayId: !Ref InternetGateway

  # PublicSubnet1RouteTableAssociation:
  #     Type: AWS::EC2::SubnetRouteTableAssociation
  #     Properties:
  #         RouteTableId: !Ref PublicRouteTable
  #         SubnetId: !Ref PublicSubnet1

  # # TODO: FIX UP AND CHECK
  # EC2Instance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     ImageId: !FindInMap [ AmazonLinuxAMI, !Ref 'AWS::Region', AMI]  # Lookup the AMI in the region map
  #     InstanceType: t2.micro                                         # Any size is fine
  #     KeyName: !Ref InstanceKeyName                                  # Use the keypair from the input parameters
  #     SecurityGroupIds:
  #     - !Ref EC2InstanceSG
  #     - !GetAtt VPC.DefaultSecurityGroup
  #     SubnetId: !Ref PublicSubnet1
  #     Tags:
  #     - Key: Name
  #       Value: !Join ['-', [!Ref 'AppName', 'DeployGroup', !Ref 'AWS::Region']]
  #     - Key: Project
  #       Value: !Join ['-', [!Ref 'AppName', !Ref 'AWS::Region']]

  ComprehendKeyPhraseAnalysis:
    Properties:
      Description: "Triggered by S3 review upload to the repo bucket and start the key phrase analysis via Amazon Comprehend"
      Handler: comprehend.handler
      MemorySize: 128
      Policies:
        Statement:
          -
            Sid: "comprehend"
            Effect: Allow
            Action:
              - comprehend:*
            Resource: "*"
          -
            Sid: "textract"
            Effect: Allow
            Action:
              - textract:*
            Resource: "*"
          -
            Sid: "s3"
            Effect: Allow
            Action:
              - s3:*
            Resource: !Sub "arn:aws:s3:::${S3}/*"
          -
            Sid: "es"
            Effect: Allow
            Action:
              - es:*
            Resource: "*"
      Environment:
        Variables:
          bucket: !Ref S3
          esDomain: !GetAtt ElasticsearchDomain.DomainEndpoint
          
      Runtime: python3.6
      Timeout: 300
      Layers: 
        - !Ref MyLayer
    Type: AWS::Serverless::Function

  # Create bucket to store pictures
  S3:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicReadWrite
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - HEAD
            AllowedOrigins:
              - "*"

  # Create bucket for S3 static content
  S3Static:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
    DeletionPolicy: Retain

  # Create bucket policy for S3 static
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: S3StaticPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Static
                - /*
      Bucket: !Ref S3Static

  # START OF ALB+EC2 SECURITY GROUP SETTINGS

# ALB EXTERNAL ACCESS SECURITY GROUP
#   ALBExternalAccessSG:
#     Type: 'AWS::EC2::SecurityGroup'
#     Properties:
#       GroupDescription: 'Allow external access to ALB'
#       VpcId: !Ref VPC
#       Tags:
#         - Key: Name
#           Value: !Sub '${AppName}-${Environment}-alb-external-access-ingrees-SG'
#         - Key: Environment
#           Value: !Ref 'Environment'

# # EC2 INSTANCE SECURITY GROUP
#   EC2InstanceSG:
#     Type: 'AWS::EC2::SecurityGroup'
#     Properties:
#       GroupDescription: 'EC2 Instance Security Group'
#       VpcId: !Ref VPC
#       Tags:
#         - Key: Name
#           Value: !Sub '${AppName}-${Environment}-ec2-instance-SG'
#         - Key: Environment
#           Value: !Ref 'Environment'

# # SECURITY GROUP INGRESS
#   HTTPSTcpIn:
#     Type: 'AWS::EC2::SecurityGroupIngress'
#     Properties:
#       GroupId: !Ref 'ALBExternalAccessSG'
#       ToPort: 443
#       IpProtocol: 'tcp'
#       FromPort: 443
#       CidrIp: '0.0.0.0/0'

#   HTTPTcpIn:
#     Type: 'AWS::EC2::SecurityGroupIngress'
#     Properties:
#       GroupId: !Ref 'ALBExternalAccessSG'
#       ToPort: 80
#       IpProtocol: 'tcp'
#       FromPort: 80
#       CidrIp: '0.0.0.0/0'

# # SECURITY GROUP INGRESS
#   Tcp8080In:
#     Type: 'AWS::EC2::SecurityGroupIngress'
#     Properties:
#       GroupId: !Ref 'EC2InstanceSG'
#       ToPort: 8080
#       IpProtocol: 'tcp'
#       FromPort: 8080
#       SourceSecurityGroupId: !Ref 'ALBExternalAccessSG'

# # SECURITY GROUP EGRESS
#   Tcp8080Out:
#     Type: 'AWS::EC2::SecurityGroupEgress'
#     Properties:
#       GroupId: !Ref 'ALBExternalAccessSG'
#       ToPort: 8080
#       IpProtocol: 'tcp'
#       FromPort: 8080
#       DestinationSecurityGroupId: !Ref 'EC2InstanceSG'
  # END OF ALB+EC2 SECURITY GROUP SETTINGS
  
# START OF ALB
# ORIGIN ALB
#   OriginALB:
#     Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
#     Properties:
#       Name: !Sub '${AppName}-${Environment}-alb'
#       Scheme: !Ref 'ALBScheme'
#       Type: !Ref 'ALBType'
#       LoadBalancerAttributes:
#         - Key: idle_timeout.timeout_seconds
#           Value: !Ref 'ALBAttributeIdleTimeOut'
#         - Key: deletion_protection.enabled
#           Value: !Ref 'ALBAttributeDeletionProtection'
#         - Key: routing.http2.enabled
#           Value: !Ref 'ALBAttributeRoutingHttp2'
#       Subnets:
#         - !Ref PublicSubnet1
#         - !Ref PublicSubnet2
#       SecurityGroups:
#         - !Ref 'ALBExternalAccessSG'
#       Tags:
#         - Key: Name
#           Value: !Sub '${AppName}-${Environment}-alb'
#         - Key: Environment
#           Value: !Ref 'Environment'

# # ORIGIN ALB TARGET GROUP
#   OriginALBTG:
#     Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
#     DependsOn: OriginALB
#     Properties:
#       Name: !Sub '${AppName}-${Environment}-alb-tg'
#       HealthCheckProtocol: !Ref 'HealthCheckProtocol'
#       HealthCheckPath: !Ref 'HealthCheckPath'
#       HealthCheckPort: !Sub '${OriginALBTGPort}'
#       HealthCheckIntervalSeconds: !Ref 'ALBTargetGroupHealthCheckIntervalSeconds'
#       HealthCheckTimeoutSeconds: !Ref 'ALBTargetGroupHealthCheckTimeoutSeconds'
#       HealthyThresholdCount: !Ref 'ALBTargetGroupHealthyThresholdCount'
#       UnhealthyThresholdCount: !Ref 'ALBTargetGroupUnhealthyThresholdCount'
#       TargetGroupAttributes:
#         - Key: deregistration_delay.timeout_seconds
#           Value: !Ref 'ALBTargetGroupAttributeDeregistration'
#       TargetType: 'instance'
#       Targets:
#         - Id: !Ref 'EC2Instance'
#           Port: !Sub '${OriginALBTGPort}'
#       Port: !Sub '${OriginALBTGPort}'
#       Protocol: HTTP
#       VpcId: !Ref VPC
#       Tags:
#         - Key: Name
#           Value: !Sub '${AppName}-${Environment}-alb-tg'
#         - Key: Environment
#           Value: !Ref 'Environment'

# # EDITED TO USE HTTP
# # ORIGIN ALB HTTP LISTENER
#   OriginALBHttpsListener:
#     Type: 'AWS::ElasticLoadBalancingV2::Listener'
#     DependsOn: OriginALBTG
#     Properties:
#       DefaultActions:
#         - TargetGroupArn: !Ref 'OriginALBTG'
#           Type: forward
#       LoadBalancerArn: !Ref 'OriginALB'
#       Port: 80
#       Protocol: 'HTTP'
#       #Certificates:
#         #- CertificateArn: !Sub 'arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${ACMCertificateIdentifier}'
#       #SslPolicy: 'ELBSecurityPolicy-FS-2018-06'

# # EDITED TO USE HTTP
# # ORIGIN ALB HTTP LISTENER RULE
#   OriginALBHttpsListenerRule:
#     Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
#     DependsOn: OriginALBHttpsListener
#     Properties:
#       Actions:
#         - Type: forward
#           TargetGroupArn: !Ref 'OriginALBTG'
#       Conditions:
#         - Field: path-pattern
#           Values:
#             - /*
#       ListenerArn: !Ref 'OriginALBHttpsListener'
#       Priority: 1
# # END OF ALB

  # CloudFront Distribution
  myDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: 'CloudFront Distribution to ALB and S3 Origin'
        Origins:
        - Id: myS3Origin
          DomainName: !GetAtt [ S3Static, DomainName ]
          CustomOriginConfig:
            HTTPPort: 80
            HTTPSPort: 443
            OriginProtocolPolicy: !Ref 'OriginProtocolPolicy'
            OriginKeepaliveTimeout: !Ref 'OriginKeepaliveTimeout'
            OriginReadTimeout: !Ref 'OriginReadTimeout'
            OriginSSLProtocols:
              - TLSv1
              - TLSv1.1
              - TLSv1.2
              - SSLv3
        # - Id: !Ref 'OriginALB'
        #   DomainName: !GetAtt 'OriginALB.DNSName'
        #   CustomOriginConfig:
        #     HTTPPort: 80
        #     HTTPSPort: 443
        #     OriginProtocolPolicy: !Ref 'OriginProtocolPolicy'
        #     OriginKeepaliveTimeout: !Ref 'OriginKeepaliveTimeout'
        #     OriginReadTimeout: !Ref 'OriginReadTimeout'
        #     OriginSSLProtocols:
        #       - TLSv1
        #       - TLSv1.1
        #       - TLSv1.2
        #       - SSLv3
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          TargetOriginId: myS3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: allow-all
        PriceClass: PriceClass_200
        Restrictions:
          GeoRestriction:
            RestrictionType: whitelist
            Locations:
            - AQ
            - CV
            - PH
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  TestS3BucketEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      SourceAccount: !Ref 'AWS::AccountId'
      FunctionName: !Ref 'ComprehendKeyPhraseAnalysis'
      SourceArn: !GetAtt
        - S3
        - Arn
      Principal: s3.amazonaws.com

  ApplyNotificationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: S3BucketNotificationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowBucketNotification
                Effect: Allow
                Action: s3:PutBucketNotification
                Resource:
                  - !Sub 'arn:aws:s3:::${S3}'
                  - !Sub 'arn:aws:s3:::${S3}/*'
                  
                  
  ApplyBucketNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Dummy function, just logs the received event
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt 'ApplyNotificationFunctionRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import boto3
          import logging
          import json
          import cfnresponse

          s3Client = boto3.client('s3')
          logger = logging.getLogger()
          logger.setLevel(logging.DEBUG)

          def addBucketNotification(bucketName, notificationId, functionArn):
            notificationResponse = s3Client.put_bucket_notification_configuration(
              Bucket=bucketName,
              NotificationConfiguration={
                'LambdaFunctionConfigurations': [
                  {
                    'Id': notificationId,
                    'LambdaFunctionArn': functionArn,
                    'Events': [
                      's3:ObjectCreated:*'
                    ]
                  },
                ]
              }
            )
            return notificationResponse

          def create(properties, physical_id):
            bucketName = properties['S3Bucket']
            notificationId = properties['NotificationId']
            functionArn = properties['FunctionARN']
            response = addBucketNotification(bucketName, notificationId, functionArn)
            logger.info('AddBucketNotification response: %s' % json.dumps(response))
            return cfnresponse.SUCCESS, physical_id

          def update(properties, physical_id):
            return cfnresponse.SUCCESS, None

          def delete(properties, physical_id):
            return cfnresponse.SUCCESS, None

          def handler(event, context):
            logger.info('Received event: %s' % json.dumps(event))

            status = cfnresponse.FAILED
            new_physical_id = None

            try:
              properties = event.get('ResourceProperties')
              physical_id = event.get('PhysicalResourceId')

              status, new_physical_id = {
                'Create': create,
                'Update': update,
                'Delete': delete
              }.get(event['RequestType'], lambda x, y: (cfnresponse.FAILED, None))(properties, physical_id)
            except Exception as e:
              logger.error('Exception: %s' % e)
              status = cfnresponse.FAILED
            finally:
              cfnresponse.send(event, context, status, {}, new_physical_id)

  # Cognito and IAM
  #
  # Creates a user pool in cognito to auth against
  UserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: !Sub ${DOMAINNAME}_kibana_access
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: 'OFF'
      EmailVerificationSubject: !Ref AWS::StackName
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true

  # Creates a needed group in Cognito for Kibana access
  UserPoolGroup:
    Type: "AWS::Cognito::UserPoolGroup"
    Properties:
      Description: 'User pool group for Kibana access'
      GroupName: !Sub ${DOMAINNAME}_kibana_access_group
      Precedence: 0
      UserPoolId: !Ref UserPool

  # Creates a User Pool Client to be used by the identity pool
  UserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      ClientName: !Sub ${DOMAINNAME}-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool

  # Creates a federated Identity pool
  # Identity Pool to be also used for S3 uploads
  IdentityPool:
    Type: 'AWS::Cognito::IdentityPool'
    Properties:
      IdentityPoolName: !Sub ${DOMAINNAME}Identity
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # Create a role for unauthorized access to AWS resources. Very limited access.
  # Only allows users in the previously created Identity Pool
  # To be also used for S3 uploads
  CognitoUnAuthorizedRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated
      Policies:
        - PolicyName: 'CognitoUnauthorizedPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:BulkPublish'
                  - 'cognito-sync:DescribeIdentityPoolUsage'
                  - 'cognito-sync:GetBulkPublishDetails'
                  - 'cognito-sync:GetCognitoEvents'
                  - 'cognito-sync:GetIdentityPoolConfiguration'
                  - 'cognito-sync:ListIdentityPoolUsage'
                  - 'cognito-sync:SetCognitoEvents'
                  - 'cognito-sync:SetIdentityPoolConfiguration'
                Resource: !Sub 'arn:aws:cognito-identity:${AWS::Region}:${AWS::AccountId}:identitypool/${IdentityPool}'
        - PolicyName: 'S3UnauthorizedUploadPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 's3:*'
                Resource: !Join ["", [ 'arn:aws:s3:::' , !Ref S3 ,'/*']]

  # Create a role for authorized access to AWS resources.
  # Only allows users in the previously created Identity Pool
  CognitoAuthorizedRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: 'CognitoAuthorizedPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:BulkPublish'
                  - 'cognito-sync:DescribeIdentityPoolUsage'
                  - 'cognito-sync:GetBulkPublishDetails'
                  - 'cognito-sync:GetCognitoEvents'
                  - 'cognito-sync:GetIdentityPoolConfiguration'
                  - 'cognito-sync:ListIdentityPoolUsage'
                  - 'cognito-sync:SetCognitoEvents'
                  - 'cognito-sync:SetIdentityPoolConfiguration'
                  - 'cognito-identity:DeleteIdentityPool'
                  - 'cognito-identity:DescribeIdentityPool'
                  - 'cognito-identity:GetIdentityPoolRoles'
                  - 'cognito-identity:GetOpenIdTokenForDeveloperIdentity'
                  - 'cognito-identity:ListIdentities'
                  - 'cognito-identity:LookupDeveloperIdentity'
                  - 'cognito-identity:MergeDeveloperIdentities'
                  - 'cognito-identity:UnlikeDeveloperIdentity'
                  - 'cognito-identity:UpdateIdentityPool'
                Resource: !Sub 'arn:aws:cognito-identity:${AWS::Region}:${AWS::AccountId}:identitypool/${IdentityPool}'

  CognitoESAccessRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonESCognitoAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'es.amazonaws.com'
            Action:
              - 'sts:AssumeRole'

  # Assigns the roles to the Identity Pool
  IdentityPoolRoleMapping:
    Type: 'AWS::Cognito::IdentityPoolRoleAttachment'
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn
        
  AdminUser:
    Type: 'AWS::Cognito::UserPoolUser'
    Properties:
      DesiredDeliveryMediums:
        - 'EMAIL'
      UserAttributes:
        - Name: email
          Value: !Ref CognitoAdminEmail
      Username: !Ref CognitoAdminEmail
      UserPoolId: !Ref UserPool

  # Custom resource to configure Cognito and ES
  SetupESCognito:
    Type: 'Custom::SetupESCognito'
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt LambdaESCognito.Arn
      Domain: !Ref DOMAINNAME
      CognitoDomain: !Sub ${DOMAINNAME}-${AWS::AccountId}
      UserPoolId: !Ref UserPool
      IdentityPoolId: !Ref IdentityPool
      RoleArn: !GetAtt CognitoESAccessRole.Arn

  LambdaESCognito:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Centralized Logging - Lambda function to enable cognito authentication for kibana
      Environment:
        Variables:
          # V56536055 - 10/08/2018 - better logging capabilities
          LOG_LEVEL: 'INFO' #change to WARN, ERROR or DEBUG as needed
      Handler: index.handler
      Runtime: nodejs8.10
      Timeout: 600
      Role: !GetAtt LambdaESCognitoRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "clog-auth.zip"]]

  LambdaESCognitoRole:
    Type: AWS::IAM::Role
    DependsOn: ElasticsearchDomain
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - es:UpdateElasticsearchDomainConfig
            Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${DOMAINNAME}'
          - Effect: Allow
            Action:
            - cognito-idp:CreateUserPoolDomain
            - cognito-idp:DeleteUserPoolDomain
            Resource: !GetAtt UserPool.Arn
          - Effect: Allow
            Action:
            - iam:PassRole
            Resource: !GetAtt CognitoESAccessRole.Arn
    
  ElasticsearchDomain: 
    Type: AWS::Elasticsearch::Domain
    Properties:
      DomainName: !Ref DOMAINNAME
      ElasticsearchVersion: "6.3"
      ElasticsearchClusterConfig: 
        InstanceCount: 1
        InstanceType: "t2.small.elasticsearch"
      EBSOptions: 
        EBSEnabled: true
        Iops: 0
        VolumeSize: 10
        VolumeType: "gp2"
      SnapshotOptions: 
        AutomatedSnapshotStartHour: 0
      AccessPolicies: 
        Version: "2012-10-17"
        Statement: 
        - Action: 'es:*'
          Principal:
            AWS: !Sub
              - arn:aws:sts::${AWS::AccountId}:assumed-role/${AuthRole}/CognitoIdentityCredentials
              - { AuthRole: !Ref CognitoAuthorizedRole }
          Effect: Allow
          Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${DOMAINNAME}/*' 

  ApplyNotification:
    Type: Custom::ApplyNotification
    Properties:
      ServiceToken: !GetAtt 'ApplyBucketNotificationFunction.Arn'
      S3Bucket: !Ref 'S3'
      FunctionARN: !GetAtt 'ComprehendKeyPhraseAnalysis.Arn'
      NotificationId: S3ObjectCreatedEvent

Outputs:
  S3KeyPhraseBucket:
    Value:
      Ref: "S3"
      
  KibanaLoginURL:
    Description: Kibana login URL
    Value: !Sub https://${ElasticsearchDomain.DomainEndpoint}/_plugin/kibana/

# S3 Website URL
  WebsiteURL:
    Value: !GetAtt 
      - S3Static
      - WebsiteURL
    Description: URL for website hosted on S3
  S3BucketSecureURL:
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt 
          - S3Static
          - DomainName
    Description: Name of S3 bucket to hold website content
